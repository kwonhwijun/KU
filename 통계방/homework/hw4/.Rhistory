S <- function(z, lambda){
sign(z) * max(abs(z) - lambda, 0)
}
cd.elastic <- function(x, y, alpha, lambda){
# CD algorithm for lasso    # marginal standardization of x
z <- scale(x)
m <- attr(z, "scaled:center")  # save original mean of X
s <- attr(z, "scaled:scale")   # save original scale of X
u <- (y - mean(y))
p <- ncol(z)
n <- length(y)
# initialization
beta <- coef(lm(y ~ z - 1)); r <- y - z %*% beta
for (iter in 1:100) {
new.beta <- beta
for (j in 1:p) {
temp <- beta[j] + crossprod(z[,j], r)/n
new.beta[j] <- S(temp, (lambda * alpha))/ (1+ lambda * (1 - alpha)) # S(temp, (alpha +))
r <- r - (new.beta[j] - beta[j]) * z[,j]
}
delta <- max(abs(new.beta - beta))
if (delta < 1.0e-3) break
beta <- new.beta
}
beta <- new.beta/s
c(beta)
}
lambda_values <-10^seq(-4, -1, length.out =100)
mse_results <- numeric(length(lambda_values))
num_beta <- numeric(length(lambda_values))
idx = 1
for (i in seq_along(lambda_values)) {
beta_hat = cd.elastic(x, y, 0.5, lambda = lambda_values[i])
y_pred = x.test %*% beta_hat # (500,50) %*% (50.1)
mse = mean((y.test-y_pred)**2)
mse_results[i] = mse
num_beta[i] = sum(beta_hat != 0)
}
train <- matrix(scan("train.txt"), 500, 51)
test  <- matrix(scan("test.txt"), 500, 51)
x <- train[,-51] ; y <- train[,51]
x.test <- test[,-51] ;  y.test <- test[,51]
S <- function(z, lambda){
sign(z) * max(abs(z) - lambda, 0)
}
cd.elastic <- function(x, y, alpha, lambda){
# CD algorithm for lasso    # marginal standardization of x
z <- scale(x)
m <- attr(z, "scaled:center")  # save original mean of X
s <- attr(z, "scaled:scale")   # save original scale of X
u <- (y - mean(y))
p <- ncol(z)
n <- length(y)
# initialization
beta <- coef(lm(y ~ z - 1)); r <- y - z %*% beta
for (iter in 1:100) {
new.beta <- beta
for (j in 1:p) {
temp <- beta[j] + crossprod(z[,j], r)/n
new.beta[j] <- S(temp, (lambda * alpha))/ (1+ lambda * (1 - alpha)) # S(temp, (alpha +))
r <- r - (new.beta[j] - beta[j]) * z[,j]
}
delta <- max(abs(new.beta - beta))
if (delta < 1.0e-3) break
beta <- new.beta
}
beta <- new.beta/s
c(beta)
}
lambda_values <-10^seq(-4, -1, length.out =100)
mse_results <- numeric(length(lambda_values))
num_beta <- numeric(length(lambda_values))
idx = 1
for (i in seq_along(lambda_values)) {
beta_hat = cd.elastic(x, y, 0.5, lambda = lambda_values[i])
y_pred = x.test %*% beta_hat # (500,50) %*% (50.1)
mse = mean((y.test-y_pred)**2)
mse_results[i] = mse
num_beta[i] = sum(beta_hat != 0)
}
# Lambda/MSE PLOT
results = data.frame(Lambda = lambda_values , MSE = mse_results, num_beta = num_beta)
min_mse_index <- which.min(results$MSE)
min_lambda <- results$Lambda[min_mse_index]
cat("Min MSE", min(results$MSE))
cat("\nBest Lambda", min_lambda )
# Plot MSE VS Lambda
plot(results$Lambda, results$MSE, type = 'b', xlab = "Lambda", ylab = "MSE", main = "MSE vs Lambda")
abline(v = min_lambda, col = 'red', lwd = 2)
# Plot Lamda vs Num Coeff
plot(data.frame(Lambda = lambda_values , num_beta = num_beta))
abline(v = min_lambda, col = 'red', lwd = 2)
seq(-4, -1, length.out =100)
train <- matrix(scan("train.txt"), 500, 51)
test  <- matrix(scan("test.txt"), 500, 51)
x <- train[,-51] ; y <- train[,51]
x.test <- test[,-51] ;  y.test <- test[,51]
S <- function(z, lambda){
sign(z) * max(abs(z) - lambda, 0)
}
cd.elastic <- function(x, y, alpha, lambda){
# CD algorithm for lasso    # marginal standardization of x
z <- scale(x)
m <- attr(z, "scaled:center")  # save original mean of X
s <- attr(z, "scaled:scale")   # save original scale of X
u <- (y - mean(y))
p <- ncol(z)
n <- length(y)
# initialization
beta <- coef(lm(y ~ z - 1)); r <- y - z %*% beta
for (iter in 1:100) {
new.beta <- beta
for (j in 1:p) {
temp <- beta[j] + crossprod(z[,j], r)/n
new.beta[j] <- S(temp, (lambda * alpha))/ (1+ lambda * (1 - alpha)) # S(temp, (alpha +))
r <- r - (new.beta[j] - beta[j]) * z[,j]
}
delta <- max(abs(new.beta - beta))
if (delta < 1.0e-3) break
beta <- new.beta
}
beta <- new.beta/s
c(beta)
}
seq(-4, -1, length.out =100)
lambda_values <-10^seq(-4, -1, length.out =100)
mse_results <- numeric(length(lambda_values))
num_beta <- numeric(length(lambda_values))
idx = 1
for (i in seq_along(lambda_values)) {
beta_hat = cd.elastic(x, y, 0.5, lambda = lambda_values[i])
y_pred = x.test %*% beta_hat # (500,50) %*% (50.1)
mse = mean((y.test-y_pred)**2)
mse_results[i] = mse
num_beta[i] = sum(beta_hat != 0)
}
# Lambda/MSE PLOT
results = data.frame(Lambda = lambda_values , MSE = mse_results, num_beta = num_beta)
min_mse_index <- which.min(results$MSE)
min_lambda <- results$Lambda[min_mse_index]
cat("Min MSE", min(results$MSE))
cat("\nBest Lambda", min_lambda )
# Plot MSE VS Lambda
plot(results$Lambda, results$MSE, type = 'b', xlab = "Lambda", ylab = "MSE", main = "MSE vs Lambda")
abline(v = min_lambda, col = 'red', lwd = 2)
# Plot Lamda vs Num Coeff
plot(data.frame(Lambda = lambda_values , num_beta = num_beta))
abline(v = min_lambda, col = 'red', lwd = 2)
library(glmnet)
cv_model <- cv.glmnet(x, y, alpha=0.5, type.measure="mse")
par(mfrow = c(1, 2))
plot(cv_model)
plot(cv_model$glmnet.fit, "lambda")
lambda <- 10^seq(-4, 0, length.out = 100)
mse_list <- numeric(length(lambda_values))
for (i in seq_along(lambda_values)) {
model <- glmnet(x, y, alpha=0.5, lambda=lambda_values[i])
y_pred<- predict(model, s=lambda[i], newx=x.test)
mse_list[i] <- mean((y.test - y_pred)^2)
}
min_mse_idx <- which.min(mse_list)
lambda_min <- lambda_values[min_mse_idx]
min_mse <- mse_list[min_mse_idx]
cat("\nLambda_Min:", lambda_min, "\nMin_MSE:", min_mse)
# MSE vs Lambda graph
plot(lambda_values, mse_list, col = "blue", lwd = 2,
xlab = "Lambda", ylab = "Test MSE", main = "Test MSE vs. Lambda")
points(lambda_min, min_mse, col = "red", pch = 19, cex = 1.5)
text(lambda_min, min_mse, labels = sprintf("Min MSE at Lambda=%.4f", lambda_min), pos = 4, col = "red")
model <- glmnet(x, y, alpha = 0.5 , lambda = lambda_min)
coefficients_lambda_min <- coef(model, s = "lambda.min")
coefficients_lambda_min <- as.matrix(coefficients_lambda_min)
nonzero_coefficients_lambda_min <- coefficients_lambda_min[coefficients_lambda_min[, 1] != 0, , drop = FALSE]
print(paste("Non-zero Coefficients at lambda.min:", lambda_min, "when alpah is 0.5"))
print(nonzero_coefficients_lambda_min)
lambda <- 10^seq(-4, 0, length.out = 100)
mse_list <- numeric(length(lambda_values))
for (i in seq_along(lambda_values)) {
model <- glmnet(x, y, alpha=0.5, standardize =  F,  lambda=lambda_values[i])
y_pred<- predict(model, s=lambda[i], newx=x.test)
mse_list[i] <- mean((y.test - y_pred)^2)
}
min_mse_idx <- which.min(mse_list)
lambda_min <- lambda_values[min_mse_idx]
min_mse <- mse_list[min_mse_idx]
cat("\nLambda_Min:", lambda_min, "\nMin_MSE:", min_mse)
# MSE vs Lambda graph
plot(lambda_values, mse_list, col = "blue", lwd = 2,
xlab = "Lambda", ylab = "Test MSE", main = "Test MSE vs. Lambda")
points(lambda_min, min_mse, col = "red", pch = 19, cex = 1.5)
text(lambda_min, min_mse, labels = sprintf("Min MSE at Lambda=%.4f", lambda_min), pos = 4, col = "red")
train <- matrix(scan("train.txt"), 500, 51)
setwd("~/Dropbox/KU/통계방/homework/hw4")
train <- matrix(scan("train.txt"), 500, 51)
test  <- matrix(scan("test.txt"), 500, 51)
x <- train[,-51] ; y <- train[,51]
x.test <- test[,-51] ;  y.test <- test[,51]
library(glmnet)
cv_model <- cv.glmnet(x, y, alpha=0.5, type.measure="mse")
par(mfrow = c(1, 2))
plot(cv_model)
plot(cv_model$glmnet.fit, "lambda")
# MSE vs Lambda graph
plot(lambda_values, mse_list, col = "blue", lwd = 2,
xlab = "Lambda", ylab = "Test MSE", main = "Test MSE vs. Lambda")
points(lambda_min, min_mse, col = "red", pch = 19, cex = 1.5)
text(lambda_min, min_mse, labels = sprintf("Min MSE at Lambda=%.4f", lambda_min), pos = 4, col = "red")
train <- matrix(scan("train.txt"), 500, 51)
test  <- matrix(scan("test.txt"), 500, 51)
x <- train[,-51] ; y <- train[,51]
x.test <- test[,-51] ;  y.test <- test[,51]
library(glmnet)
cv_model <- cv.glmnet(x, y, alpha=0.5, type.measure="mse")
par(mfrow = c(1, 2))
plot(cv_model)
plot(cv_model$glmnet.fit, "lambda")
```{r}
```{r}
lambda <- 10^seq(-4, 0, length.out = 100)
mse_list <- numeric(length(lambda_values))
for (i in seq_along(lambda_values)) {
model <- glmnet(x, y, alpha=0.5, standardize =  F,  lambda=lambda_values[i])
y_pred<- predict(model, s=lambda[i], newx=x.test)
mse_list[i] <- mean((y.test - y_pred)^2)
}
min_mse_idx <- which.min(mse_list)
lambda_min <- lambda_values[min_mse_idx]
min_mse <- mse_list[min_mse_idx]
cat("\nLambda_Min:", lambda_min, "\nMin_MSE:", min_mse)
# MSE vs Lambda graph
plot(lambda_values, mse_list, col = "blue", lwd = 2,
xlab = "Lambda", ylab = "Test MSE", main = "Test MSE vs. Lambda")
points(lambda_min, min_mse, col = "red", pch = 19, cex = 1.5)
text(lambda_min, min_mse, labels = sprintf("Min MSE at Lambda=%.4f", lambda_min), pos = 4, col = "red")
train <- matrix(scan("train.txt"), 500, 51)
test  <- matrix(scan("test.txt"), 500, 51)
x <- train[,-51] ; y <- train[,51]
x.test <- test[,-51] ;  y.test <- test[,51]
lambda <- 10^seq(-4, 0, length.out = 100)
mse_list <- numeric(length(lambda_values))
for (i in seq_along(lambda_values)) {
model <- glmnet(x, y, alpha=0.5, standardize =  F,  lambda=lambda_values[i])
y_pred<- predict(model, s=lambda[i], newx=x.test)
mse_list[i] <- mean((y.test - y_pred)^2)
}
min_mse_idx <- which.min(mse_list)
lambda_min <- lambda_values[min_mse_idx]
min_mse <- mse_list[min_mse_idx]
cat("\nLambda_Min:", lambda_min, "\nMin_MSE:", min_mse)
# MSE vs Lambda graph
plot(lambda_values, mse_list, col = "blue", lwd = 2,
xlab = "Lambda", ylab = "Test MSE", main = "Test MSE vs. Lambda")
points(lambda_min, min_mse, col = "red", pch = 19, cex = 1.5)
text(lambda_min, min_mse, labels = sprintf("Min MSE at Lambda=%.4f", lambda_min), pos = 4, col = "red")
train <- matrix(scan("train.txt"), 500, 51)
test  <- matrix(scan("test.txt"), 500, 51)
x <- train[,-51] ; y <- train[,51]
x.test <- test[,-51] ;  y.test <- test[,51]
library(glmnet)
lambda_values <-10^seq(-4, -1, length.out =100)
mse_list <- numeric(length(lambda_values))
for (i in seq_along(lambda_values)) {
model <- glmnet(x, y, alpha=0.5, standardize =  F,  lambda=lambda_values[i])
y_pred<- predict(model, s=lambda[i], newx=x.test)
mse_list[i] <- mean((y.test - y_pred)^2)
}
min_mse_idx <- which.min(mse_list)
lambda_min <- lambda_values[min_mse_idx]
min_mse <- mse_list[min_mse_idx]
cat("\nLambda_Min:", lambda_min, "\nMin_MSE:", min_mse)
library(glmnet)
lambda_values <-10^seq(-4, -1, length.out =100)
mse_list <- numeric(length(lambda_values))
for (i in seq_along(lambda_values)) {
model <- glmnet(x, y, alpha=0.5, standardize =  F,  lambda=lambda_values[i])
y_pred<- predict(model, s=lambda_values[i], newx=x.test)
mse_list[i] <- mean((y.test - y_pred)^2)
}
min_mse_idx <- which.min(mse_list)
lambda_min <- lambda_values[min_mse_idx]
min_mse <- mse_list[min_mse_idx]
cat("\nLambda_Min:", lambda_min, "\nMin_MSE:", min_mse)
# MSE vs Lambda graph
plot(lambda_values, mse_list, col = "blue", lwd = 2,
xlab = "Lambda", ylab = "Test MSE", main = "Test MSE vs. Lambda")
points(lambda_min, min_mse, col = "red", pch = 19, cex = 1.5)
text(lambda_min, min_mse, labels = sprintf("Min MSE at Lambda=%.4f", lambda_min), pos = 4, col = "red")
